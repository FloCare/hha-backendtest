# Generated by Django 2.0.6 on 2018-07-20 10:05

from django.db import migrations, models


def log(message):
    def fake_op(apps, schema_editor):
        print(message)
    return fake_op


def match_address_for_org(apps, schema_editor):
    Organization = apps.get_model('user_auth', 'Organization')
    Add = apps.get_model('user_auth', 'Address')
    for org in Organization.objects.all():
        try:
            add = Add.objects.get(id=org.address)
            print(add.uuid)
            org.temp_add = add.uuid
            org.save()
        except Exception as e:
            print('Error: ', e)
            print('Address is empty for org:', org.name)


def match_address_for_userprofile(apps, schema_editor):
    UserProfile = apps.get_model('user_auth', 'UserProfile')
    Add = apps.get_model('user_auth', 'Address')
    for userprofile in UserProfile.objects.all():
        try:
            add = Add.objects.get(id=userprofile.address)
            print(add.uuid)
            userprofile.temp_add = add.uuid
            userprofile.save()
        except Exception as e:
            print('Error:', e)
            print('Address is empty for user:', userprofile.user.username)


def match_org_and_user_for_useraccessorg(apps, schema_editor):
    UserOrgAccess = apps.get_model('user_auth', 'UserOrganizationAccess')
    Org = apps.get_model('user_auth', 'Organization')
    UserProfile = apps.get_model('user_auth', 'UserProfile')
    for access in UserOrgAccess.objects.all():
        try:
            org = Org.objects.get(id=access.organization)
            print('Org UUID:', org.uuid)
            access.temp_org = org.uuid
        except Exception as e:
            print('Error:', e)
            print('Organization is empty for this UserOrgAccess')

        try:
            profile = UserProfile.objects.get(id=access.user)
            print('Profile UUID:', profile.uuid)
            access.temp_user = profile.uuid
        except Exception as e:
            print('Error:', e)
            print('UserProfile is empty for this UserOrgAccess')
        try:
            access.save()
        except Exception as e:
            print('Error during saving UserOrgAccess:', e)


class Migration(migrations.Migration):

    dependencies = [
        ('user_auth', '0008_auto_20180720_1002'),
        ('phi', '0018_update_data')
    ]

    operations = [

        # Update Address in Organization

        # Add temp field in Organization to store address_uuid
        migrations.RunPython(log('Step 1')),
        migrations.AddField(
            model_name='organization',
            name='temp_add',
            field=models.UUIDField(null=True),
        ),

        # Data migration
        migrations.RunPython(log('Step 2')),
        migrations.RunPython(match_address_for_org),

        # Remove address field
        migrations.RunPython(log('Step 3')),
        migrations.RemoveField(model_name='organization', name='address'),

        # Rename temp field to address field
        migrations.RunPython(log('Step 4')),
        migrations.RenameField(
            model_name='organization', old_name='temp_add', new_name='address'),

        # Update Address in UserProfile

        # Add temp field in UserProfile to store address_uuid
        migrations.RunPython(log('Step 1')),
        migrations.AddField(
            model_name='userprofile',
            name='temp_add',
            field=models.UUIDField(null=True),
        ),

        # Data migration
        migrations.RunPython(log('Step 2')),
        migrations.RunPython(match_address_for_userprofile),

        # Remove address field
        migrations.RunPython(log('Step 3')),
        migrations.RemoveField(model_name='userprofile', name='address'),

        # Rename temp field to address field
        migrations.RunPython(log('Step 4')),
        migrations.RenameField(
            model_name='userprofile', old_name='temp_add', new_name='address'),


        # Update Org and UserProfile in UserOrgAccess

        # Add temp fields in UserOrgAccess to store org_uuid and userprofile_uuid
        migrations.RunPython(log('Step 1')),
        migrations.AddField(
            model_name='userorganizationaccess',
            name='temp_org',
            field=models.UUIDField(null=True),
        ),
        migrations.AddField(
            model_name='userorganizationaccess',
            name='temp_user',
            field=models.UUIDField(null=True),
        ),

        # Data migration
        migrations.RunPython(log('Step 2')),
        migrations.RunPython(match_org_and_user_for_useraccessorg),

        # Remove user and org field
        migrations.RunPython(log('Step 3')),
        migrations.RemoveField(model_name='userorganizationaccess', name='user'),
        migrations.RemoveField(model_name='userorganizationaccess', name='organization'),

        # Rename temp field to user field
        migrations.RunPython(log('Step 4')),
        migrations.RenameField(
            model_name='userorganizationaccess', old_name='temp_user', new_name='user'),
        migrations.RenameField(
            model_name='userorganizationaccess', old_name='temp_org', new_name='organization'),
    ]
